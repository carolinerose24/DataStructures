<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>7</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>756</x>
      <y>322</y>
      <w>203</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;

--
- data : Type

--
+ Node&lt;Type&gt;(): constsructor
+ Node&lt;Type&gt;(Type): constructor

+ getData() : Type
+ setData(Type) : void
//+ getNext() : Node&lt;Type&gt; *
//+ setNext(Node&lt;Type&gt; *) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>756</x>
      <y>539</y>
      <w>294</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;

--
- next : Node&lt;Type&gt; *

--
LinearNode&lt;Type&gt;(): constructor
LinearNode&lt;Type&gt;(Type) : constructor
LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor

+ getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>819</x>
      <y>476</y>
      <w>70</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>742</x>
      <y>161</y>
      <w>147</w>
      <h>21</h>
    </coordinates>
    <panel_attributes>Control Structure Nodes
bg=none</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>994</x>
      <y>336</y>
      <w>266</w>
      <h>182</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : Type*

--
+ Array&lt;Type&gt;(int) : constructor
+ Array&lt;Type&gt;(Array&lt;Type&gt;) : construtor
+ getSize() : int
+ setAtIndex(int,Type) : void
+ getFromIndex(int) : Type
+ operator [] 
+ operator = Array&lt;Type&gt; &amp;
+ ~Array(): destructor

bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>742</x>
      <y>196</y>
      <w>196</w>
      <h>119</h>
    </coordinates>
    <panel_attributes>Note:
operators tell the arrays how 
to use []'s
[] copies array
= assigns

Array of type is made of linear nodes
Type is any kind of thing
Diamond arrow -&gt; made up of
destructor destroys memory allocation
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1120</x>
      <y>707</y>
      <w>203</w>
      <h>154</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int

--
*List Structure Methods*
/getFromIndex(int) : Type/
/add(TypE) : void/
/addAtIndex(int,Type) : void/
/remove(int) : Type/
*List Accessors*
/getSize() : int/
/getFront() : LinearNode&lt;Type&gt; */
/getEnd() : LindearNode&lt;Type&gt; */
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1155</x>
      <y>574</y>
      <w>224</w>
      <h>105</h>
    </coordinates>
    <panel_attributes>Italic because not implemented
just framework
Filled in diamond-&gt; composed of/made up of
Inherit arrow solid
composed filled Diamond
has relationship
Aggregate-&gt; a step down from composed of
bg=none</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1113</x>
      <y>1106</y>
      <w>203</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--

--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>903</x>
      <y>1106</y>
      <w>203</w>
      <h>252</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor

*Stack Methods*
+ push(Type) : void
+ pop() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>966</x>
      <y>1064</y>
      <w>56</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1148</x>
      <y>1064</y>
      <w>49</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1043</x>
      <y>588</y>
      <w>140</w>
      <h>133</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;170.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>903</y>
      <w>231</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt; *
- end : LinearNode&lt;Type&gt; *
--
*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type
*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1099</x>
      <y>854</y>
      <w>56</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1372</x>
      <y>798</y>
      <w>189</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>CrimeData
--
- Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1589</x>
      <y>798</y>
      <w>161</w>
      <h>147</h>
    </coordinates>
    <panel_attributes>Music
--
- Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1393</x>
      <y>1085</y>
      <w>182</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>LinearTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1582</x>
      <y>1085</y>
      <w>168</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>TreeTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1393</x>
      <y>1253</y>
      <w>182</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>AlgorithmTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1582</x>
      <y>1169</y>
      <w>168</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>HashableTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1393</x>
      <y>1169</y>
      <w>182</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>GraphTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1309</x>
      <y>1085</y>
      <w>98</w>
      <h>42</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>861</x>
      <y>1001</y>
      <w>133</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>lt=-
Aggregation</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;10.0;10.0;210.0;60.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>518</y>
      <w>252</w>
      <h>189</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
- nextNode : DoubleNode*
- previousNode : DoubleNode*
--
+ DoubleNode()
+ DoubleNode(Type)
+ DoubleNode(Type, DN*, DN*)
+ get/set











bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>574</x>
      <y>392</y>
      <w>196</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>260.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>189</x>
      <y>0</y>
      <w>427</w>
      <h>434</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
- "MAXIMUM : int"
- adjacencyMatrix : bool [][]
- weightCostMatrix : int [][]
- graphData : Type []
- vertexCount : int

--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

"Connect vertices"
+ addEdge(int source, int target):
+ addEdgeUndirected(int source, int target): void
+ addEdgeCost(int source, int target): void

"Disconnect vertices"
+ removeEdge(int source, int target):
+ removeEdgeUndirected(int source, int target): void
+ removeEdgeCost(int source, int target): void

"Accessors"
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

"Check connections"
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnected(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

"Traversals"
+ depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ breadthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]): void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>35</x>
      <y>602</y>
      <w>329</w>
      <h>245</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--
- root : BinaryTreeNode&lt;Type&gt;* 
- leftChild : BinaryTreeNode&lt;Type&gt;* 
- rightChild : BinaryTreeNode&lt;Type&gt;* 

--
+ BinaryTreeNode&lt;Type&gt;() : constructor
+ BinaryTreeNode&lt;Type&gt;(Type) : constructor

+ getRoot() : BinaryTreeNode&lt;Type&gt;*
+ getLeftChild() : BinaryTreeNode&lt;Type&gt;*
+ getRightChild() : BinaryTreeNode&lt;Type&gt;*

+ setRoot(BinaryRootTree&lt;Type&gt;*) : void
+ setLeftChild(BinaryRootTree&lt;Type&gt;*) : void
+ setRightChild(BinaryRootTree&lt;Type&gt;*) : void
bg=dark_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>238</x>
      <y>455</y>
      <w>532</w>
      <h>161</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>740.0;10.0;10.0;10.0;10.0;210.0</additional_attributes>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>693</x>
      <y>756</y>
      <w>42</w>
      <h>77</h>
    </coordinates>
    <panel_attributes> 
fg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>700</x>
      <y>819</y>
      <w>42</w>
      <h>77</h>
    </coordinates>
    <panel_attributes> 
fg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>637</x>
      <y>847</y>
      <w>42</w>
      <h>77</h>
    </coordinates>
    <panel_attributes> 
fg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLActor</id>
    <coordinates>
      <x>644</x>
      <y>777</y>
      <w>42</w>
      <h>77</h>
    </coordinates>
    <panel_attributes>
fg=green</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>28</x>
      <y>924</y>
      <w>322</w>
      <h>238</h>
    </coordinates>
    <panel_attributes>/Tree &lt;Type&gt;/
--

# root : BinaryTreeNode&lt;Type&gt;
//# means protected

--
*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

*Data Members*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void



bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>105</x>
      <y>840</y>
      <w>91</w>
      <h>98</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>364</x>
      <y>924</y>
      <w>413</w>
      <h>364</h>
    </coordinates>
    <panel_attributes>BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : Constructor
+ ~BinarySearchTree() : Destructor
# destroyTree() : void

*Informational Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
+ getRoot() : BinaryTreeNode&lt;Type&gt; *

*Recursive Information Helpers*
# calculateSize(BinaryTreeNode&lt;Type&gt; * startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt; * startNode) : int
# isBalanced(BinaryTreeNode&lt;Type&gt; * startNode) : bool
# isComplete(BinaryTreeNode&lt;Type&gt; * startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# removeNode(BinaryTreeNode&lt;Type&gt; * removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraversal() : void

*Recursive Traversal Helpers*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt; * inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt; * preStart) : void
# postOrderTraversal(BinaryTreeNode&lt;Type&gt; * postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt;*
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; * current) : BinaryTreeNode&lt;Type&gt;*

bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
