<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>230</y>
      <w>290</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;

--
- data : Type

--
+ Node&lt;Type&gt;(): constsructor
+ Node&lt;Type&gt;(Type): constructor

+ getData() : Type
+ setData(Type) : void
//+ getNext() : Node&lt;Type&gt; *
//+ setNext(Node&lt;Type&gt; *) : void

bg=magenta</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>540</y>
      <w>420</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;

--
- next : Node&lt;Type&gt; *

--
LinearNode&lt;Type&gt;(): constructor
LinearNode&lt;Type&gt;(Type) : constructor
LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;) : constructor

+ getNext() : Node&lt;Type&gt; *
+ setNext(Node&lt;Type&gt; *) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>110</x>
      <y>450</y>
      <w>100</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;80.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>0</y>
      <w>210</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Control Structure Nodes
bg=none</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>250</y>
      <w>380</w>
      <h>260</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : Type*

--
+ Array&lt;Type&gt;(int) : constructor
+ Array&lt;Type&gt;(Array&lt;Type&gt;) : construtor
+ getSize() : int
+ setAtIndex(int,Type) : void
+ getFromIndex(int) : Type
+ operator [] 
+ operator = Array&lt;Type&gt; &amp;
+ ~Array(): destructor

bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>0</x>
      <y>50</y>
      <w>280</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Note:
operators tell the arrays how 
to use []'s
[] copies array
= assigns

Array of type is made of linear nodes
Type is any kind of thing
Diamond arrow -&gt; made up of
destructor destroys memory allocation
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>540</x>
      <y>780</y>
      <w>290</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int

--
*List Structure Methods*
/getFromIndex(int) : Type/
/add(TypE) : void/
/addAtIndex(int,Type) : void/
/remove(int) : Type/
*List Accessors*
/getSize() : int/
/getFront() : LinearNode&lt;Type&gt; */
/getEnd() : LindearNode&lt;Type&gt; */
bg=light_gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>590</x>
      <y>590</y>
      <w>320</w>
      <h>150</h>
    </coordinates>
    <panel_attributes>Italic because not implemented
just framework
Filled in diamond-&gt; composed of/made up of
Inherit arrow solid
composed filled Diamond
has relationship
Aggregate-&gt; a step down from composed of
bg=none</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>530</x>
      <y>1350</y>
      <w>290</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--

--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>230</x>
      <y>1350</y>
      <w>290</w>
      <h>360</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--

--
+ Stack() : constructor
+ ~Stack() : destructor

*Stack Methods*
+ push(Type) : void
+ pop() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=gray</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>1290</y>
      <w>80</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>1290</y>
      <w>70</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>610</y>
      <w>200</w>
      <h>190</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=0..n</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;170.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>340</x>
      <y>1060</y>
      <w>330</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt; *
- end : LinearNode&lt;Type&gt; *
--
*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type
*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd : LinearNode&lt;Type&gt; *
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>510</x>
      <y>990</y>
      <w>80</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>200</x>
      <y>770</y>
      <w>190</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;20.0;100.0;10.0;170.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>900</x>
      <y>910</y>
      <w>270</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>CrimeData
--
- Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1210</x>
      <y>910</y>
      <w>230</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Music
--
- Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>1320</y>
      <w>260</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>LinearTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1200</x>
      <y>1320</y>
      <w>240</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>TreeTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>1560</y>
      <w>260</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>AlgorithmTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1200</x>
      <y>1440</y>
      <w>240</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>HashableTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>930</x>
      <y>1440</y>
      <w>260</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>GraphTester

--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>1320</y>
      <w>140</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
</panel_attributes>
    <additional_attributes>120.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>170</x>
      <y>1200</y>
      <w>190</w>
      <h>230</h>
    </coordinates>
    <panel_attributes>lt=-
Aggregation</panel_attributes>
    <additional_attributes>170.0;10.0;10.0;10.0;10.0;210.0;60.0;210.0</additional_attributes>
  </element>
</diagram>
